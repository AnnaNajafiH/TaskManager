# Define networks for container communication
networks:
  app-network:
    driver: bridge

# Define Volumes for data persistence
volumes:
  postgres-data:
    driver: local
  server-logs:
    driver: local

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine # Using official PostgreSQL image
    container_name: task-manager-postgres
    restart: unless-stopped # Restart policy
    environment:
      POSTGRES_DB: taskmanager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data # Persistent volume for database
      - ./server/src/database:/docker-entrypoint-initdb.d:ro # Mount database directory
    ports:
      - "5432:5432" # Expose database port (optional, for external access)
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskmanager"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory:
            128M
            # Backend API Service
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: task-manager-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres # Using service name for internal communication
      DB_PORT: 5432
      DB_NAME: taskmanager
      DB_USER: postgres
      DB_PASSWORD: secure_password_123
    volumes:
      - server-logs:/app/logs # Volume for application logs
    ports:
      - "5000:5000" # Expose API port
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be healthy
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://127.0.0.1:5000/health', res => process.exit(res.statusCode === 200 ? 0 : 1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Frontend Service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: task-manager-client
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000 # API endpoint for frontend (browser access)
    ports:
      - "5173:5173" # Expose Vite development server
    depends_on:
      backend:
        condition: service_healthy # Wait for backend to be healthy
    networks:
      - app-network
    volumes:
      - ./client/src:/app/src # Mount source code for hot reload
      - ./client/public:/app/public # Mount public assets
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:5173/ || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M